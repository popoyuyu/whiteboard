Question #1: Turning Strings to URLs
URLs cannot have spaces. Instead, all spaces in a string are replaced with %20. Write an algorithm that replaces all spaces in a string with %20.

You may not use the replace() method or regular expressions to solve this problem. Solve the problem with and without recursion.

Example
Input: "Jasmine Ann Jones"

Output: "Jasmine%20Ann%20Jones"


Without recursion:
function spaceReplace(string) {
  let url = string.split(" ").join("%20");
  return url;
}

Recursion:
const spaceReplace = (string) => {
  if (string === "") {
    return "";
  } else if (string[string.length - 1] === " ") {
    return spaceReplace(string.substring(0, string.length -1)) + "%20";
  } else {
    return (spaceReplace(string.substring(0, string.length-1)) + string[string.length - 1]);
  }
}


************************************************************************************************************************************************************************************************************************************************************


Question #2: Array Deduping
Write an algorithm that removes duplicates from an array. Do not use a function like filter() to solve this. Once you have solved the problem, demonstrate how it can be solved with filter(). Solve the problem with and without recursion.

Example
Input: [7, 9, "hi", 12, "hi" 7, 53]

Output: [7, 9, "hi", 12, 53]


https://stackoverflow.com/questions/63928416/how-does-new-setarray-works-in-javascript

Without recursion: 
const input = [7, 9, "hi", 12, "hi" 7, 53];
let newArray = [...new Set(input)];

Using filter()
function filterMethod(input){
let newArray = input.filter((element, index) => {
   return input.indexOf(element) == index;
});
return newArray;
}

https://stackoverflow.com/questions/51217531/how-do-i-recursively-remove-consecutive-duplicate-elements-from-an-array-javas

Recursion:
const array = [7, 9, "hi", 12, "hi" 7, 53];
const filterArray = (array) => {
  if (array.length === 0) {
    return array.concat([]);
  }
  const newArray = array.slice(0, -1);
  if (newArray.includes(array[array.lenght-1])) {
    return filterArray(newArray)
  } else {
    return filterArray(newArray).concat(array[array.length-1])
  }
}




************************************************************************************************************************************************************************************************************************************************************



Question #3: Compressing Strings
Write an algorithm that takes a string with repeated characters and compresses them, using a number to show how many times the repeated character has been compressed. For instance, aaa would be written as 3a. Solve the problem with and without recursion.

Example
Input: "aaabccdddda"

Output: "3ab2c4da"

Without recursion:
let string = "aaabccdddda";
function compress(string) {
  let count = 1;
  let newStr = "";
  for (let i = 0; i < string.length; i ++) {
    if (string [i+1] === string[i]) {
      count ++;
    } else {
      if (count ===1){
        newStr += string[i];
      } else {
        newStr += count + string[i];
      }
      count = 1;
    }
  }
  return newStr;
}





************************************************************************************************************************************************************************************************************************************************************


Question #4: Checking for Uniqueness
Write an algorithm that determines whether all the elements in a string are unique. You may not convert the string into an array or use array methods to solve this problem. The algorithm should return a boolean.

Example
Input: "hello"

Output: false

Input: "copyright"

Output: true

https://stackoverflow.com/questions/28207610/checking-if-the-characters-in-a-string-are-all-unique

function unique(string) {
  for (let i = 0; i < string.length; i++){
    if (i !== string.substring[i]) {
      return true;
    } else{
      return false;
    }
  }
}
doesnt work

function unique(string) {
  return new Set(string).size == string.length;
}






************************************************************************************************************************************************************************************************************************************************************


Question #5: Array Sorting
Write an algorithm that sorts an array without using the sort() method. There are many different sorting algorithms - take the time to read about the following:

Quick sort
Merge sort
Heap sort
Insertion sort
Bubble sort
Selection sort
You may implement any of the above algorithms (or your own) to solve the problem - as long as it doesn't use sort().

Example
Input: [9, 2, 7, 12]

Output: [2, 7, 9, 12]

https://stackabuse.com/bubble-sort-and-cocktail-shaker-sort-in-javascript/



function bubbleSort(array) {
  let x = array.length;

  for (let i = 0; i < x; i ++) {
    for (let j = 0; j < x; j++) {
      if(array[j] > array[j+1]) {
        let variable = array[j];
        array[j] = array[j + 1];
        array[j+1] = variable;
      }
    }
  }
  return array;
}

let array = [9, 2, 7, 12]